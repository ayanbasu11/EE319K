


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Ayan Basu
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 1/17/2021
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ; Touch and release PA2 and the motor cycles between 3 s
                       tates
    9 00000000         ;   1) the stepper motor outputs cycle 10,6,5,9,..., eve
                       ry 11.1ms or 1 rps
   10 00000000         ;   2) the stepper motor output remains fixed
   11 00000000         ;   3) the stepper motor outputs cycle 5,6,10,9,...  eve
                       ry 11.1ms or -1 rps
   12 00000000         ;   Implement debugging instruments which gather data (s
                       tate and timing)
   13 00000000         ;   to verify that the system is functioning as expected
                       .
   14 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   15 00000000         ;  PA2 is Button input  (1 means pressed, 0 means not pr
                       essed)
   16 00000000         ;  PB3-0 are stepper motor outputs (you do not need to a
                       dd actual motor)
   17 00000000         ;  PF3 is Green LED on Launchpad used as a heartbeat
   18 00000000         ; Instrumentation data to be gathered is as follows:
   19 00000000         ; After every output to Port B, collect one state and ti
                       me entry. 
   20 00000000         ; The state information is the 5 bits on Port A bit 2 an
                       d Port B PB3-0
   21 00000000         ;   place one 8-bit entry in your Data Buffer  
   22 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in us units)
   23 00000000         ;   place one 32-bit entry in the Time Buffer
   24 00000000         ;    calculate elasped time in usec from previous to thi
                       s capture
   25 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   26 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   27 00000000         ;       entries you should stop collecting data
   28 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   29 00000000         ; On each iteration of the main loop of your Debug_Beat 
                       function is called 
   30 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   31 00000000         
   32 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   33 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   34 00000000 400043FC 
                       GPIO_PORTA_DATA_R



ARM Macro Assembler    Page 2 


                               EQU              0x400043FC
   35 00000000 40004400 
                       GPIO_PORTA_DIR_R
                               EQU              0x40004400
   36 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   37 00000000 40004514 
                       GPIO_PORTA_PDR_R
                               EQU              0x40004514
   38 00000000 400053FC 
                       GPIO_PORTB_DATA_R
                               EQU              0x400053FC
   39 00000000 40005400 
                       GPIO_PORTB_DIR_R
                               EQU              0x40005400
   40 00000000 4000551C 
                       GPIO_PORTB_DEN_R
                               EQU              0x4000551C
   41 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   42 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   43 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   44 00000000         ; RAM Area
   45 00000000                 AREA             DATA, ALIGN=2
   46 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   47 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   48 00000008         
   49 00000008         ;place your debug variables in RAM here
   50 00000008                 ALIGN
   51 00000008         DATA_BUFFER
   52 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            100
   53 0000006C         END_DATA_BUFFER
   54 0000006C                 ALIGN
   55 0000006C         TIME_BUFFER
   56 0000006C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            400
   57 000001FC         END_TIME_BUFFER
   58 000001FC 00 00 00 
              00       DataPtr SPACE            4
   59 00000200 00 00 00 
              00       TimePtr SPACE            4
   60 00000204         PREV_TIME
   61 00000204 00FFFFFF        DCD              0x00FFFFFF
   62 00000208         
   63 00000208         ; ROM Area
   64 00000208                 IMPORT           TExaS_Init
   65 00000208                 IMPORT           SysTick_Init
   66 00000208         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   67 00000208                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   68 00000000                 THUMB
   69 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   70 00000004                 EXPORT           Start
   71 00000004         
   72 00000004         Start
   73 00000004 B672            CPSID            I           ; disable interrrup
                                                            ts until initializa
                                                            tion complete



ARM Macro Assembler    Page 6 


   74 00000006         ; TExaS_Init sets bus clock at 80 MHz
   75 00000006         ; PF3, PA2, PB3-PE0 out logic analyzer to TExasDisplay
   76 00000006 4859            LDR              R0,=SendDataToLogicAnalyzer
   77 00000008 F040 0001       ORR              R0,R0,#1    ;T-bit must be 1
   78 0000000C F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   79 00000010         ;place your initializations here
   80 00000010 F000 F820       BL               Stepper_Init ; initialize stepp
                                                            er motor
   81 00000014 F000 F83B       BL               Switch_Init ; initialize switch
                                                             input
   82 00000018         ;---Your Initialization------------
   83 00000018 F000 F884       BL               Debug_Init  ;(you write this)
   84 0000001C         ;**********************
   85 0000001C B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   86 0000001E F04F 0500       MOV              R5,#0       ; last PA4
   87 00000022         loop
   88 00000022         ;----- Your HeartBeat------------
   89 00000022         ;toggle PF3 every 11th call
   90 00000022 F000 F8A1       BL               Debug_Beat  ;(you write this)
   91 00000026         ;**********************
   92 00000026 4952            LDR              R1,=GPIO_PORTA_DATA_R
   93 00000028 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
   94 0000002A F014 0404       ANDS             R4,R4,#0x04 ; select just bit 2
                                                            
   95 0000002E D00A            BEQ              no          ; skip if not pushe
                                                            d
   96 00000030 2D00            CMP              R5,#0
   97 00000032 D108            BNE              no          ; skip if pushed la
                                                            st time
   98 00000034         ; this time yes, last time no
   99 00000034 494F            LDR              R1,=Direction
  100 00000036 6808            LDR              R0,[R1]     ; current direction
                                                            
  101 00000038 F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
  102 0000003C 2802            CMP              R0,#2
  103 0000003E D101            BNE              ok
  104 00000040 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
  105 00000044 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
  106 00000046 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
  107 00000048 F000 F838       BL               Stepper_Step
  108 0000004C 484A            LDR              R0,=146874  ;about 11.1ms
  109 0000004E F000 F845       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  110 00000052 E7E6            B                loop
  111 00000054         ;Initialize stepper motor interface
  112 00000054         Stepper_Init
  113 00000054 F04F 0001       MOV              R0,#1
  114 00000058 4946            LDR              R1,=Direction
  115 0000005A 6008            STR              R0,[R1]     ; Direction=0 (CW)
  116 0000005C F04F 0000       MOV              R0,#0
  117 00000060 4946            LDR              R1,=Index



ARM Macro Assembler    Page 7 


  118 00000062 6008            STR              R0,[R1]     ; Index=0
  119 00000064         ; activate clock for Port E
  120 00000064 4946            LDR              R1, =SYSCTL_RCGCGPIO_R
  121 00000066 6808            LDR              R0, [R1]
  122 00000068 F040 0002       ORR              R0, R0, #0x02 ; Clock for B
  123 0000006C 6008            STR              R0, [R1]
  124 0000006E BF00            NOP
  125 00000070 BF00            NOP                          ; allow time to fin
                                                            ish activating
  126 00000072         ; set direction register
  127 00000072 4944            LDR              R1, =GPIO_PORTB_DIR_R
  128 00000074 6808            LDR              R0, [R1]
  129 00000076 F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PB0-PB3
                                                            
  130 0000007A 6008            STR              R0, [R1]
  131 0000007C         ; enable digital port
  132 0000007C 4942            LDR              R1, =GPIO_PORTB_DEN_R
  133 0000007E 6808            LDR              R0, [R1]
  134 00000080 F040 000F       ORR              R0, R0, #0x0F ; enable PB3-0
  135 00000084 6008            STR              R0, [R1]
  136 00000086 4770            BX               LR
  137 00000088 E8BD 4001       POP              {R0,LR}
  138 0000008C BD01            POP              {R0,PC}
  139 0000008E         ;Initialize switch interface, PA2
  140 0000008E         Switch_Init
  141 0000008E         ; activate clock for Port A
  142 0000008E 493C            LDR              R1, =SYSCTL_RCGCGPIO_R
  143 00000090 6808            LDR              R0, [R1]
  144 00000092 F040 0001       ORR              R0, R0, #0x01 ; Clock for A
  145 00000096 6008            STR              R0, [R1]
  146 00000098 BF00            NOP
  147 0000009A BF00            NOP                          ; allow time to fin
                                                            ish activating
  148 0000009C         ; set direction register
  149 0000009C 493B            LDR              R1, =GPIO_PORTA_DIR_R
  150 0000009E 6808            LDR              R0, [R1]
  151 000000A0 F020 0004       BIC              R0, R0, #0x04 ; Input on PA2
  152 000000A4 6008            STR              R0, [R1]
  153 000000A6         ; set pulldown register
  154 000000A6 493A            LDR              R1, =GPIO_PORTA_PDR_R
  155 000000A8 6808            LDR              R0, [R1]
  156 000000AA F040 0004       ORR              R0, R0, #0x04 
                                                            ; pull down on PA2
  157 000000AE 6008            STR              R0, [R1]
  158 000000B0         ; 5) enable digital port
  159 000000B0 4938            LDR              R1, =GPIO_PORTA_DEN_R
  160 000000B2 6808            LDR              R0, [R1]
  161 000000B4 F040 0004       ORR              R0, R0, #0x04 ; enable PA2
  162 000000B8 6008            STR              R0, [R1]
  163 000000BA 4770            BX               LR
  164 000000BC         ; Step the motor clockwise
  165 000000BC         ; Direction determines the rotational direction
  166 000000BC         ; Input: None
  167 000000BC         ; Output: None
  168 000000BC         Stepper_Step
  169 000000BC B510            PUSH             {R4,LR}
  170 000000BE 492F            LDR              R1,=Index
  171 000000C0 680A            LDR              R2,[R1]     ; old Index



ARM Macro Assembler    Page 8 


  172 000000C2 4B2C            LDR              R3,=Direction
  173 000000C4 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  174 000000C6 4402            ADD              R2,R2,R0
  175 000000C8 F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  176 000000CC 600A            STR              R2,[R1]     ; new Index
  177 000000CE 4B32            LDR              R3,=Stepper ; table
  178 000000D0 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  179 000000D2 4932            LDR              R1,=GPIO_PORTB_DATA_R 
                                                            ; change PE3-PE0
  180 000000D4 6008            STR              R0,[R1]
  181 000000D6         ;---Your capture ------------
  182 000000D6 F000 F829       BL               Debug_Capture ;(you write this)
                                                            
  183 000000DA         ;**********************
  184 000000DA BD10            POP              {R4,PC}
  185 000000DC         ; inaccurate and inefficient time delay
  186 000000DC         Wait
  187 000000DC 1E40            SUBS             R0,R0,#1    ; outer loop
  188 000000DE D1FD            BNE              Wait
  189 000000E0 4770            BX               LR
  190 000000E2         
  191 000000E2         
  192 000000E2         ;------------PortF_Init------------
  193 000000E2         ; Activate Port F and initialize PF1-3 for built-in LEDs
                       .
  194 000000E2         ; Input: none
  195 000000E2         ; Output: none
  196 000000E2         ; Modifies: R0, R1
  197 000000E2         PortF_Init
  198 000000E2         ; activate clock for Port F
  199 000000E2 4927            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = S
                                                            YSCTL_RCGCGPIO_R
  200 000000E4 6808            LDR              R0, [R1]    ; R0 = [R1]
  201 000000E6 F040 0020       ORR              R0, R0, #0x00000020 ; bit 5
  202 000000EA 6008            STR              R0, [R1]    ; [R1] = R0
  203 000000EC BF00            NOP
  204 000000EE BF00            NOP                          ; allow time to fin
                                                            ish activating
  205 000000F0         ; set direction register
  206 000000F0 492B            LDR              R1, =GPIO_PORTF_DIR_R ; R1 = GP
                                                            IO_PORTF_DIR_R
  207 000000F2 6808            LDR              R0, [R1]    ; R0 = [R1]
  208 000000F4 F040 000E       ORR              R0, R0, #0x0E ; make PF3 output
                                                            ; PF1-3 built-in LE
                                                            Ds
  209 000000F8 6008            STR              R0, [R1]    ; [R1] = R0
  210 000000FA         ; enable digital port
  211 000000FA 492A            LDR              R1, =GPIO_PORTF_DEN_R ; R1 = GP
                                                            IO_PORTF_DEN_R
  212 000000FC 6808            LDR              R0, [R1]    ; R0 = [R1]
  213 000000FE F040 000E       ORR              R0, R0, #0x0E ; enable digital 
                                                            I/O on PF1-3
  214 00000102 6008            STR              R0, [R1]
  215 00000104 4770            BX               LR          ; return
  216 00000106         ; edit the following only if you need to move pins from 
                       PF3, PA2, PB3-0      



ARM Macro Assembler    Page 9 


  217 00000106         ; logic analyzer on the real board
  218 00000106 40004010 
                       PA2     equ              0x40004010
  219 00000106 40025020 
                       PF3     equ              0x40025020
  220 00000106 4000503C 
                       PB30    equ              0x4000503C
  221 00000106 4000C000 
                       UART0_DR_R
                               equ              0x4000C000
  222 00000106         SendDataToLogicAnalyzer
  223 00000106 4928            LDR              R1,=PA2
  224 00000108 6809            LDR              R1,[R1]     ; read PA2
  225 0000010A 4828            LDR              R0,=PB30    ; read PB3-PB0
  226 0000010C 6800            LDR              R0,[R0]
  227 0000010E EA40 0081       ORR              R0,R0,R1,LSL #2 ;combine into o
                                                            ne 5-bit value
  228 00000112 4927            LDR              R1,=PF3
  229 00000114 6809            LDR              R1,[R1]     ; read PF3
  230 00000116 EA40 0081       ORR              R0,R0,R1,LSL #2 ;combine into o
                                                            ne 6-bit value
  231 0000011A F040 0080       ORR              R0,R0,#0x80 ; bit 7=1 means log
                                                            ic analyzer data
  232 0000011E 4925            LDR              R1,=UART0_DR_R
  233 00000120 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  234 00000122 4770            BX               LR
  235 00000124         
  236 00000124         ;---------------Your code for Lab 4----------------
  237 00000124         ;Debug initialization, save all registers (not just R4-R
                       11)
  238 00000124         ; you will call existing PortF_Init 
  239 00000124         ; you need to implement SysTick_Init in SysTick.s
  240 00000124         ; you will call SysTick_Init here
  241 00000124         Debug_Init
  242 00000124 B507            PUSH             {R0,R1,R2,LR}
  243 00000126 F7FF FFDC       BL               PortF_Init  ; PF3 output to gre
                                                            en LED
  244 0000012A         ;you write this
  245 0000012A         
  246 0000012A         
  247 0000012A BD07            POP              {R0,R1,R2,PC}
  248 0000012C         ;Debug capture, save all registers (not just R4-R11)
  249 0000012C         ;Save PA2,PB3-0 as 5 bit value in DataBuf
  250 0000012C         ;Save elapsed time difference as 32-bit time in usec in 
                       TimeBuf
  251 0000012C         Debug_Capture
  252 0000012C         ;you write this
  253 0000012C         ;assume capture is called every 11.1ms
  254 0000012C         ;Let N = number of instructions in Debug_Capture
  255 0000012C         ;Calculate T = N instructions * 2cycles/instruction * 12
                       .5ns/cycle
  256 0000012C         ;Calculate intrusiveness is T/11.1ms 
  257 0000012C B57F            PUSH             {R0-R6,LR}
  258 0000012E        0 
                       index   RN               R0
  259 0000012E        1 
                       len     RN               R1
  260 0000012E        2 



ARM Macro Assembler    Page 10 


                       ones    RN               R2
  261 0000012E         
  262 0000012E 4822            LDR              index, =DATA_BUFFER
  263 00000130 F100 0164       ADD              len, index, #100
  264 00000134 F04F 32FF       LDR              ones, =0xFFFFFFFF
  265 00000138         
  266 00000138         ;fill VALS with FF's
  267 00000138 4281    loop1   CMP              len, index
  268 0000013A D003            BEQ              done1
  269 0000013C 6002            STR              ones, [index]
  270 0000013E F100 0004       ADD              index, index, #4
  271 00000142 E7F9            B                loop1
  272 00000144         done1
  273 00000144 481D            LDR              index, =TIME_BUFFER
  274 00000146 F500 71C8       ADD              len, index, #400
  275 0000014A         ;fill TIME with 0xFFFFFFFF's
  276 0000014A 4281    loop2   CMP              len, index
  277 0000014C D003            BEQ              done2
  278 0000014E 6002            STR              ones, [index]
  279 00000150 F100 0004       ADD              index, index, #4
  280 00000154 E7F9            B                loop2
  281 00000156         done2
  282 00000156         ;initialize array pointers
  283 00000156 4818            LDR              R0, =DATA_BUFFER
  284 00000158 4919            LDR              R1, =DataPtr
  285 0000015A 6008            STR              R0, [R1]
  286 0000015C         
  287 0000015C 4817            LDR              R0, =TIME_BUFFER
  288 0000015E 4919            LDR              R1, =TimePtr
  289 00000160 6008            STR              R0, [R1]
  290 00000162         
  291 00000162 F7FF FFFE       BL               SysTick_Init
  292 00000166         
  293 00000166 BD7F            POP              {R0-R6,PC}
  294 00000168         ;Heartbeat, save all registers (not AAPCS) 
  295 00000168         ;toggle PF3 (green LED) every 11th call
  296 00000168         Debug_Beat
  297 00000168         ;you write this     
  298 00000168         ;index RN R0
  299 00000168         ;;len   RN R1
  300 00000168         ;idxPtr RN R2 ;index pointer
  301 00000168         ;value  RN R6 ;value to be stored in data/time buffer
  302 00000168         ;   PUSH{R0 - R6, PC}
  303 00000168         
  304 00000168         ;   ;read data pointer
  305 00000168         ;   LDR idxPtr, =DataPtr
  306 00000168         ;   LDR index, [idxPtr]
  307 00000168         ;   
  308 00000168         ;   ;read data length
  309 00000168         ;   LDR len, =END_DATA_BUFFER
  310 00000168         ;   
  311 00000168         ;   ;Return immediately if the buffers are full
  312 00000168         ;   CMP index, len
  313 00000168         ;   BEQ return
  314 00000168         ;   
  315 00000168         ;   ;read and mask data (PA4,PE3,PE2,PE1,PE0)
  316 00000168         ;   LDR R5, =GPIO_PORTA_DATA_R
  317 00000168         ;   LDRB R5, [R5]
  318 00000168         ;   AND R5, R5, #0x10



ARM Macro Assembler    Page 11 


  319 00000168         ;   LDR R6, =GPIO_PORTE_DATA_R
  320 00000168         ;   LDRB R6, [R6]
  321 00000168         ;   AND R6, R6, #0x0F
  322 00000168         ;   ORR value, R5, R6
  323 00000168         ;   
  324 00000168         ;   ;dump data, and incriment pointer
  325 00000168         ;   STRB value, [index]
  326 00000168         ;   ADD index, index, #1
  327 00000168         ;   STR index, [idxPtr]
  328 00000168         ;   
  329 00000168         ;   ;read time array pointer
  330 00000168         ;   LDR idxPtr, =TimePtr
  331 00000168         ;   LDR index, [idxPtr]
  332 00000168         
  333 00000168         ;prev_time_ptr RN R5
  334 00000168         ;prev_time     RN R4
  335 00000168         
  336 00000168         ;   ;read timer, update prev_time, and calculate delta t
                       
  337 00000168         ;   LDR R6, =NVIC_ST_CURRENT_R
  338 00000168         ;   LDR value, [R6] ;(overides R6)
  339 00000168         ;   LDR prev_time_ptr, =PREV_TIME
  340 00000168         ;   LDR prev_time, [prev_time_ptr]
  341 00000168         ;   STR value, [prev_time_ptr] ;value is currently used 
                       to store current time
  342 00000168         ;   SUB value, prev_time, value
  343 00000168         ;   AND value, value, #0x00FFFFFF
  344 00000168         ;   
  345 00000168         ;   ;dump deltaT, and incriment time pointer
  346 00000168         ;   STR value, [index]
  347 00000168         ;   ADD index, index, #4
  348 00000168         ;   STR index, [idxPtr]  
  349 00000168         ;   
  350 00000168         ;      POP  {R0-R6,PC}
  351 00000168 BD07            POP              {R0-R2, PC}
  352 0000016A         
  353 0000016A         ;   Heartbeat
  354 0000016A         ;  LDR R0, =GPIO_PORTF_DATA_R
  355 0000016A         ;  LDR R1, [R0]
  356 0000016A         ;  MOV R2, #0x04
  357 0000016A         ;  EOR R1, R2, R1
  358 0000016A         ;  STR R1, [R0]
  359 0000016A         ;  BX  LR
  360 0000016A         
  361 0000016A 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  362 0000016C                 END                          ; end of file
              00000000 
              400043FC 
              00000000 
              00023DBA 
              00000000 
              400FE608 
              40005400 
              4000551C 
              40004400 
              40004514 
              4000451C 



ARM Macro Assembler    Page 12 


              00000000 
              400053FC 
              40025400 
              4002551C 
              40004010 
              4000503C 
              40025020 
              4000C000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Users\titob\AppData\Local\A
rm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\titob\AppData\Local\Arm\
Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VERSION
 SETA 533" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --prede
fine="_RTE_ SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: DATA unused
DATA_BUFFER 00000008

Symbol: DATA_BUFFER
   Definitions
      At line 51 in file main.s
   Uses
      At line 262 in file main.s
      At line 283 in file main.s

DataPtr 000001FC

Symbol: DataPtr
   Definitions
      At line 58 in file main.s
   Uses
      At line 284 in file main.s
Comment: DataPtr used once
Direction 00000004

Symbol: Direction
   Definitions
      At line 47 in file main.s
   Uses
      At line 99 in file main.s
      At line 114 in file main.s
      At line 172 in file main.s

END_DATA_BUFFER 0000006C

Symbol: END_DATA_BUFFER
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: END_DATA_BUFFER unused
END_TIME_BUFFER 000001FC

Symbol: END_TIME_BUFFER
   Definitions
      At line 57 in file main.s
   Uses
      None
Comment: END_TIME_BUFFER unused
Index 00000000

Symbol: Index
   Definitions
      At line 46 in file main.s
   Uses
      At line 117 in file main.s
      At line 170 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


PREV_TIME 00000204

Symbol: PREV_TIME
   Definitions
      At line 60 in file main.s
   Uses
      None
Comment: PREV_TIME unused
TIME_BUFFER 0000006C

Symbol: TIME_BUFFER
   Definitions
      At line 55 in file main.s
   Uses
      At line 273 in file main.s
      At line 287 in file main.s

TimePtr 00000200

Symbol: TimePtr
   Definitions
      At line 59 in file main.s
   Uses
      At line 288 in file main.s
Comment: TimePtr used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 67 in file main.s
   Uses
      None
Comment: .text unused
Debug_Beat 00000168

Symbol: Debug_Beat
   Definitions
      At line 296 in file main.s
   Uses
      At line 90 in file main.s
Comment: Debug_Beat used once
Debug_Capture 0000012C

Symbol: Debug_Capture
   Definitions
      At line 251 in file main.s
   Uses
      At line 182 in file main.s
Comment: Debug_Capture used once
Debug_Init 00000124

Symbol: Debug_Init
   Definitions
      At line 241 in file main.s
   Uses
      At line 83 in file main.s
Comment: Debug_Init used once
PortF_Init 000000E2

Symbol: PortF_Init
   Definitions
      At line 197 in file main.s
   Uses
      At line 243 in file main.s
Comment: PortF_Init used once
SendDataToLogicAnalyzer 00000106

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 222 in file main.s
   Uses
      At line 76 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000004

Symbol: Start
   Definitions
      At line 72 in file main.s
   Uses
      At line 70 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 69 in file main.s
   Uses
      At line 177 in file main.s
Comment: Stepper used once
Stepper_Init 00000054

Symbol: Stepper_Init
   Definitions
      At line 112 in file main.s
   Uses
      At line 80 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000BC

Symbol: Stepper_Step
   Definitions
      At line 168 in file main.s
   Uses
      At line 107 in file main.s
Comment: Stepper_Step used once
Switch_Init 0000008E

Symbol: Switch_Init
   Definitions
      At line 140 in file main.s
   Uses
      At line 81 in file main.s
Comment: Switch_Init used once
Wait 000000DC

Symbol: Wait
   Definitions
      At line 186 in file main.s
   Uses
      At line 109 in file main.s
      At line 188 in file main.s

done1 00000144

Symbol: done1
   Definitions
      At line 272 in file main.s
   Uses
      At line 268 in file main.s
Comment: done1 used once
done2 00000156

Symbol: done2
   Definitions
      At line 281 in file main.s
   Uses
      At line 277 in file main.s
Comment: done2 used once
loop 00000022

Symbol: loop
   Definitions
      At line 87 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 110 in file main.s
Comment: loop used once
loop1 00000138

Symbol: loop1
   Definitions
      At line 267 in file main.s
   Uses
      At line 271 in file main.s
Comment: loop1 used once
loop2 0000014A

Symbol: loop2
   Definitions
      At line 276 in file main.s
   Uses
      At line 280 in file main.s
Comment: loop2 used once
no 00000046

Symbol: no
   Definitions
      At line 106 in file main.s
   Uses
      At line 95 in file main.s
      At line 97 in file main.s

ok 00000044

Symbol: ok
   Definitions
      At line 105 in file main.s
   Uses
      At line 103 in file main.s
Comment: ok used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 92 in file main.s
Comment: GPIO_PORTA_DATA_R used once
GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 159 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 149 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTA_PDR_R 40004514

Symbol: GPIO_PORTA_PDR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 154 in file main.s
Comment: GPIO_PORTA_PDR_R used once
GPIO_PORTB_DATA_R 400053FC

Symbol: GPIO_PORTB_DATA_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 179 in file main.s
Comment: GPIO_PORTB_DATA_R used once
GPIO_PORTB_DEN_R 4000551C

Symbol: GPIO_PORTB_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 132 in file main.s
Comment: GPIO_PORTB_DEN_R used once
GPIO_PORTB_DIR_R 40005400

Symbol: GPIO_PORTB_DIR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 127 in file main.s
Comment: GPIO_PORTB_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 211 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 206 in file main.s
Comment: GPIO_PORTF_DIR_R used once
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 33 in file main.s
   Uses
      None
Comment: NVIC_ST_CURRENT_R unused
PA2 40004010

Symbol: PA2
   Definitions
      At line 218 in file main.s
   Uses
      At line 223 in file main.s
Comment: PA2 used once
PB30 4000503C

Symbol: PB30
   Definitions
      At line 220 in file main.s
   Uses
      At line 225 in file main.s
Comment: PB30 used once
PF3 40025020

Symbol: PF3
   Definitions
      At line 219 in file main.s
   Uses
      At line 228 in file main.s
Comment: PF3 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 32 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 120 in file main.s
      At line 142 in file main.s
      At line 199 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 221 in file main.s
   Uses
      At line 232 in file main.s
Comment: UART0_DR_R used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 65 in file main.s
   Uses
      At line 291 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 64 in file main.s
   Uses
      At line 78 in file main.s
Comment: TExaS_Init used once
2 symbols
385 symbols in table
