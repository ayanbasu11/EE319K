


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s ; Code all from Lab 7
    2 00000000         ; Student names: Ayan Basu & Ayush Roychowdhury
    3 00000000         ; Last modification date: 4/13/2021
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         ; Use I2C3 to send data to SSD1306 128 by 64 pixel oLED
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement I2C_Send2
                       
    9 00000000         
   10 00000000                 EXPORT           I2C_Send2
   11 00000000                 PRESERVE8
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 ALIGN
   15 00000000 40023000 
                       I2C3_MSA_R
                               EQU              0x40023000
   16 00000000 40023004 
                       I2C3_MCS_R
                               EQU              0x40023004
   17 00000000 40023008 
                       I2C3_MDR_R
                               EQU              0x40023008
   18 00000000         ; sends two bytes to specified slave
   19 00000000         ; Input: R0  7-bit slave address
   20 00000000         ;        R1  first 8-bit data to be written.
   21 00000000         ;        R2  second 8-bit data to be written.
   22 00000000         ; Output: 0 if successful, nonzero (error code) if error
                       
   23 00000000         ; Assumes: I2C3 and port D have already been initialized
                        and enabled
   24 00000000         I2C_Send2
   25 00000000         ;; --UUU-- 
   26 00000000         ; 1) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   27 00000000         ; 2) write slave address to I2C3_MSA_R, 
   28 00000000         ;     MSA bits7-1 is slave address
   29 00000000         ;     MSA bit 0 is 0 for send data
   30 00000000         ; 3) write first data to I2C3_MDR_R
   31 00000000         ; 4) write 0x03 to I2C3_MCS_R,  send no stop, generate s
                       tart, enable
   32 00000000         ; add 4 NOPs to wait for I2C to start transmitting
   33 00000000         ; 5) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   34 00000000         ; 6) check for errors, if any bits 3,2,1 I2C3_MCS_R is h
                       igh 
   35 00000000         ;    a) if error set I2C3_MCS_R to 0x04 to send stop 
   36 00000000         ;    b) if error return R0 equal to bits 3,2,1 of I2C3_M
                       CS_R, error bits
   37 00000000         ; 7) write second data to I2C3_MDR_R
   38 00000000         ; 8) write 0x05 to I2C3_MCS_R, send stop, no start, enab
                       le
   39 00000000         ; add 4 NOPs to wait for I2C to start transmitting
   40 00000000         ; 9) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   41 00000000         ; 10) return R0 equal to bits 3,2,1 of I2C3_MCS_R, error
                        bits



ARM Macro Assembler    Page 2 


   42 00000000         ;     will be 0 is no error
   43 00000000         ; put your lab 7 solution here 
   44 00000000         
   45 00000000         ; 1) Wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0: BUSY-WAIT SYNCHRONIZATION 
   46 00000000 E92D 41F0       PUSH             {R4, R5, R6, R7, R8,LR} ;
   47 00000004         loopStart1
   48 00000004 4F20            LDR              R7, =I2C3_MCS_R ;i) Load I2C3_M
                                                            CS_R into register 
                                                             
   49 00000006 683E            LDR              R6, [R7]    ;ii) Load in data a
                                                            t that location
   50 00000008 F006 0401       AND              R4, R6, #0x01 
                                                            ;iii) Extract bit 0
                                                            
   51 0000000C 2C00            CMP              R4, #0      ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
   52 0000000E D1F9            BNE              loopStart1  ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
   53 00000010         
   54 00000010         ; 2) write slave address to I2C3_MSA_R, ;MSA bits7-1 is 
                       slave address ;MSA bit 0 is 0 for send data
   55 00000010 EA4F 0040       LSL              R0, #1      ; i) Left shift R0
   56 00000014         ;AND R0, #0xFE      ; ii) Make sure bit 0 of R0 is 0
   57 00000014 4B1D            LDR              R3, =I2C3_MSA_R ; iii) Load MSA
                                                            _R location address
                                                             in register
   58 00000016 7018            STRB             R0, [R3]    ; iv) Store R0 in M
                                                            SA register
   59 00000018         
   60 00000018         ; 3) write first data to I2C3_MDR_R
   61 00000018 4B1D            LDR              R3, =I2C3_MDR_R ; i) Load MDR l
                                                            ocation address int
                                                            o register
   62 0000001A 7019            STRB             R1, [R3]    ; ii) Store R1 into
                                                             MDR register
   63 0000001C         
   64 0000001C         ; 4) write 0x03 to I2C3_MCS_R,  send no stop, generate s
                       tart, enable ; add 4 NOPs to wait for I2C to start trans
                       mitting
   65 0000001C F04F 0403       MOV              R4, #0x03   ; i) MOV 0x03 in re
                                                            gister
   66 00000020 4B19            LDR              R3, =I2C3_MCS_R ; ii) Load MCS_
                                                            R location address 
                                                            into register
   67 00000022 701C            STRB             R4, [R3]    ; iii) Store regist
                                                            er in MCS register
   68 00000024 BF00            NOP                          ; iv) NOP (x4)
   69 00000026 BF00            NOP
   70 00000028 BF00            NOP
   71 0000002A BF00            NOP
   72 0000002C         
   73 0000002C         ; 5) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
   74 0000002C         ; i) Same as 1)
   75 0000002C         loopStart5
   76 0000002C 4B16            LDR              R3, =I2C3_MCS_R ;i) Load I2C3_M



ARM Macro Assembler    Page 3 


                                                            CS_R into register 
                                                             
   77 0000002E 681C            LDR              R4, [R3]    ;ii) Load in data a
                                                            t that location
   78 00000030 F004 0401       AND              R4, #0x01   ;iii) Extract bit 0
                                                            
   79 00000034 2C00            CMP              R4, #0      ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
   80 00000036 D1F9            BNE              loopStart5  ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
   81 00000038         
   82 00000038         ; 6) check for errors, if any bits 3,2,1 I2C3_MCS_R is h
                       igh 
   83 00000038         ;    a) if error set I2C3_MCS_R to 0x04 to send stop 
   84 00000038         ;    b) if error return R0 equal to bits 3,2,1 of I2C3_M
                       CS_R, error bits
   85 00000038 781C            LDRB             R4, [R3]    ; i) Use MCS loaded
                                                             in 5)
   86 0000003A         ;LSR R4, R4, #1     ; ii) Right shift by 1
   87 0000003A F004 040E       AND              R4, #0x0E   ; iii) Extract bit 
                                                            2, 1, 0 (0x07) Keep
                                                             bits 1,2&3 in the 
                                                            place they are loca
                                                            ted
   88 0000003E 2C00            CMP              R4, #0      ; iv) Compare with 
                                                            0 (if not 0, ERROR,
                                                             else continue)
   89 00000040 D119            BNE              Error       ; iv) Compare with 
                                                            0 (if not 0, ERROR,
                                                             else continue)
   90 00000042         ; 7) write second data to I2C3_MDR_R
   91 00000042         ; i) Same as 3)
   92 00000042 4B13            LDR              R3, =I2C3_MDR_R ; i) Load MDR l
                                                            ocation address int
                                                            o register
   93 00000044 701A            STRB             R2, [R3]    ; ii) Store R2 into
                                                             MDR register
   94 00000046         
   95 00000046         ; 8) write 0x05 to I2C3_MCS_R, send stop, no start, enab
                       le, add 4 NOPs to wait for I2C to start transmitting
   96 00000046         ; i) Same as 4) but write 0x05
   97 00000046 F04F 0405       MOV              R4, #0x05   ; i) MOV 0x05 in re
                                                            gister
   98 0000004A 4B0F            LDR              R3, =I2C3_MCS_R ; ii) Load MCS_
                                                            R location address 
                                                            into register
   99 0000004C 701C            STRB             R4, [R3]    ; iii) Store regist
                                                            er in MCS register
  100 0000004E BF00            NOP                          ; iv) NOP (x4)
  101 00000050 BF00            NOP
  102 00000052 BF00            NOP
  103 00000054 BF00            NOP
  104 00000056         
  105 00000056         ; 9) wait while I2C is busy, wait for I2C3_MCS_R bit 0 t
                       o be 0
  106 00000056         ; i) Same as 5)
  107 00000056         loopStart9



ARM Macro Assembler    Page 4 


  108 00000056 4B0C            LDR              R3, =I2C3_MCS_R ;i) Load I2C3_M
                                                            CS_R into register 
                                                             
  109 00000058 681C            LDR              R4, [R3]    ;ii) Load in data a
                                                            t that location
  110 0000005A F004 0401       AND              R4, #0x01   ;iii) Extract bit 0
                                                            
  111 0000005E 2C00            CMP              R4, #0      ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
  112 00000060 D1F9            BNE              loopStart9  ;iv) Compare to 0; 
                                                            if not 0, loop back
                                                             to start
  113 00000062         
  114 00000062         ; 10) return R0 equal to bits 3,2,1 of I2C3_MCS_R, error
                        bits
  115 00000062         ;     will be 0 is no error   ; i) Same as 6)
  116 00000062 781C            LDRB             R4, [R3]    ; i) Use MCS loaded
                                                             in 5)
  117 00000064         ;LSR R4, R4, #1     ; ii) Right shift by 1
  118 00000064 F004 040E       AND              R4, #0x0E   ; iii) Extract bit 
                                                            2, 1, 0 (0x07)
  119 00000068 2C00            CMP              R4, #0      ; iv) Compare with 
                                                            0 (if not 0, ERROR,
                                                             else continue)
  120 0000006A D104            BNE              Error
  121 0000006C F04F 0000       MOV              R0, #0      ; ii) If no error, 
                                                            MOV 0 into R0 and r
                                                            eturn
  122 00000070 E8BD 41F0       POP              {R4, R5, R6, R7, R8, LR} ;
  123 00000074 4770            BX               LR          ;   return
  124 00000076         Error
  125 00000076 4620            MOV              R0, R4      ; i) Move error cod
                                                            e to R0
  126 00000078 F04F 0504       MOV              R5, #0x04   ; ii) Move 0x04 to 
                                                            register
  127 0000007C 4C02            LDR              R4, =I2C3_MCS_R ; iii) Load MCS
                                                            _R location in regi
                                                            ster
  128 0000007E 7025            STRB             R5, [R4]    ; iv) Store 0x04 to
                                                             MCS register
  129 00000080 E8BD 4070       POP              {R4, R5, R6, LR} ;
  130 00000084         
  131 00000084 4770            BX               LR          ; v) return BX LR
  132 00000086         
  133 00000086 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  134 00000088                 END                          ; end of file
              40023004 
              40023000 
              40023008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\lcd.d -o.\lcd.o -I.\RTE\_Lab9 -IC:\Users\titob\AppData\Local\Arm
\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\titob\AppData\Local\Arm\Pa
cks\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --pr
edefine="__UVISION_VERSION SETA 533" --predefine="_RTE_ SETA 1" --predefine="TM
4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file LCD.s
   Uses
      None
Comment: .text unused
Error 00000076

Symbol: Error
   Definitions
      At line 124 in file LCD.s
   Uses
      At line 89 in file LCD.s
      At line 120 in file LCD.s

I2C_Send2 00000000

Symbol: I2C_Send2
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 10 in file LCD.s
Comment: I2C_Send2 used once
loopStart1 00000004

Symbol: loopStart1
   Definitions
      At line 47 in file LCD.s
   Uses
      At line 52 in file LCD.s
Comment: loopStart1 used once
loopStart5 0000002C

Symbol: loopStart5
   Definitions
      At line 75 in file LCD.s
   Uses
      At line 80 in file LCD.s
Comment: loopStart5 used once
loopStart9 00000056

Symbol: loopStart9
   Definitions
      At line 107 in file LCD.s
   Uses
      At line 112 in file LCD.s
Comment: loopStart9 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

I2C3_MCS_R 40023004

Symbol: I2C3_MCS_R
   Definitions
      At line 16 in file LCD.s
   Uses
      At line 48 in file LCD.s
      At line 66 in file LCD.s
      At line 76 in file LCD.s
      At line 98 in file LCD.s
      At line 108 in file LCD.s
      At line 127 in file LCD.s

I2C3_MDR_R 40023008

Symbol: I2C3_MDR_R
   Definitions
      At line 17 in file LCD.s
   Uses
      At line 61 in file LCD.s
      At line 92 in file LCD.s

I2C3_MSA_R 40023000

Symbol: I2C3_MSA_R
   Definitions
      At line 15 in file LCD.s
   Uses
      At line 57 in file LCD.s
Comment: I2C3_MSA_R used once
3 symbols
345 symbols in table
